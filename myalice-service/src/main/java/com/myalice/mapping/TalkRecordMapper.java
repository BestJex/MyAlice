package com.myalice.mapping;

import com.myalice.domain.TalkRecord;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

public interface TalkRecordMapper {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table talk_record
	 *
	 * @mbg.generated
	 */
	@Delete({ "delete from talk_record", "where id = #{id,jdbcType=VARCHAR}" })
	int deleteByPrimaryKey(String id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table talk_record
	 *
	 * @mbg.generated
	 */
	@Insert({ "insert into talk_record (id, content, ", "user_id, user_type, create_time, ",
			"connection_id, reply,replyType,groupId,questionId)", "values (#{id,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, ",
			"#{userId,jdbcType=VARCHAR}, #{userType,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
			"#{connectionId,jdbcType=VARCHAR}, #{reply,jdbcType=VARCHAR},#{replyType,jdbcType=INTEGER},#{groupId,jdbcType=VARCHAR},#{questionId,jdbcType=VARCHAR})" })
	int insert(TalkRecord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table talk_record
	 *
	 * @mbg.generated
	 */
	@Select({ "select", "id, content, user_id, user_type, create_time, connection_id, reply,groupId,questionId", "from talk_record",
			"where id = #{id,jdbcType=VARCHAR}" })
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "content", property = "content", jdbcType = JdbcType.VARCHAR),
			@Result(column = "user_id", property = "userId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "user_type", property = "userType", jdbcType = JdbcType.CHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "connection_id", property = "connectionId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "reply", property = "reply", jdbcType = JdbcType.VARCHAR),
			@Result(column = "questionId", property = "questionId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "replyType", property = "replyType", jdbcType = JdbcType.INTEGER) })
	TalkRecord selectByPrimaryKey(String id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table talk_record
	 *
	 * @mbg.generated
	 */
	@Select({ "select", "id, content, user_id, user_type, create_time, connection_id, reply,groupId", "from talk_record" })
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "content", property = "content", jdbcType = JdbcType.VARCHAR),
			@Result(column = "user_id", property = "userId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "user_type", property = "userType", jdbcType = JdbcType.CHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "connection_id", property = "connectionId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "reply", property = "reply", jdbcType = JdbcType.VARCHAR),
			@Result(column = "questionId", property = "questionId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "groupId", property = "groupId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "replyType", property = "replyType", jdbcType = JdbcType.INTEGER) })
	List<TalkRecord> selectAll();

	@Select({ "<script>select",
			"id, content, user_id, user_type, create_time, connection_id, reply,replyType,groupId,questionId ",
			"from talk_record", "<trim prefix=\"WHERE\" prefixOverrides=\"AND\">",
			"<if test=\"replyType != null\">AND replyType=#{replyType,jdbcType=VARCHAR}</if>",
			"<if test=\"userId != null and userId != ''\">AND user_id=#{userType,jdbcType=VARCHAR}</if>",
			"<if test=\"content != null\">AND content like CONCAT('%' , #{content,jdbcType=VARCHAR} , '%')</if>",
			"</trim> order by create_time desc", "</script>" }) 
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
		@Result(column = "content", property = "content", jdbcType = JdbcType.VARCHAR),
		@Result(column = "user_id", property = "userId", jdbcType = JdbcType.VARCHAR),
		@Result(column = "user_type", property = "userType", jdbcType = JdbcType.CHAR),
		@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
		@Result(column = "connection_id", property = "connectionId", jdbcType = JdbcType.VARCHAR),
		@Result(column = "reply", property = "reply", jdbcType = JdbcType.VARCHAR),
		@Result(column = "groupId", property = "groupId", jdbcType = JdbcType.VARCHAR),
		@Result(column = "questionId", property = "questionId", jdbcType = JdbcType.VARCHAR),
		@Result(column = "replyType", property = "replyType", jdbcType = JdbcType.INTEGER) })
	List<TalkRecord> select(TalkRecord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table talk_record
	 *
	 * @mbg.generated
	 */
	@Update({ "update talk_record", "set content = #{content,jdbcType=VARCHAR},",
			"user_id = #{userId,jdbcType=VARCHAR},", "user_type = #{userType,jdbcType=CHAR},",
			"create_time = #{createTime,jdbcType=TIMESTAMP},", "connection_id = #{connectionId,jdbcType=VARCHAR},",
			"reply = #{reply,jdbcType=VARCHAR},","questionId = #{questionId,jdbcType=VARCHAR},", "replyType = #{replyType,jdbcType=INTEGER}",
			"where id = #{id,jdbcType=VARCHAR}" })
	int updateByPrimaryKey(TalkRecord record);
	
	
	/**自定义方法*/
	@Select({ "select", "id, content, user_id, user_type, create_time, connection_id, reply,groupId,questionId", "from talk_record",
	"where user_id=#{userId,jdbcType=VARCHAR} and groupId=#{groupId,jdbcType=VARCHAR} order by create_time desc limit 1" })
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true) ,
	@Result(column = "content", property = "content", jdbcType = JdbcType.VARCHAR),
	@Result(column = "user_id", property = "userId", jdbcType = JdbcType.VARCHAR),
	@Result(column = "user_type", property = "userType", jdbcType = JdbcType.CHAR),
	@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
	@Result(column = "connection_id", property = "connectionId", jdbcType = JdbcType.VARCHAR),
	@Result(column = "reply", property = "reply", jdbcType = JdbcType.VARCHAR),
	@Result(column = "questionId", property = "questionId", jdbcType = JdbcType.VARCHAR),
	@Result(column = "replyType", property = "replyType", jdbcType = JdbcType.INTEGER) })
	TalkRecord selectLastAsk(@Param("groupId") String groupId , @Param("userId") String userId);
}