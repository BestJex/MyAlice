package com.myalice.mapping;

import com.myalice.domain.Users;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

public interface UsersMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table users
     *
     * @mbg.generated
     */
    @Delete({
        "delete from users",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table users
     *
     * @mbg.generated
     */
    @Insert({
        "insert into users (id, username, ",
        "password, name, ",
        "email, mobile_phone, ",
        "create_time, remarks, ",
        "user_type, portrait_url, ",
        "enabled)",
        "values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, ",
        "#{password,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, ",
        "#{email,jdbcType=VARCHAR}, #{mobilePhone,jdbcType=VARCHAR}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{remarks,jdbcType=VARCHAR}, ",
        "#{userType,jdbcType=CHAR}, #{portraitUrl,jdbcType=VARCHAR}, ",
        "#{enabled,jdbcType=BIT})"
    })
    int insert(Users record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table users
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, username, password, name, email, mobile_phone, create_time, remarks, user_type, ",
        "portrait_url, enabled",
        "from users",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile_phone", property="mobilePhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="remarks", property="remarks", jdbcType=JdbcType.VARCHAR),
        @Result(column="user_type", property="userType", jdbcType=JdbcType.CHAR),
        @Result(column="portrait_url", property="portraitUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="enabled", property="enabled", jdbcType=JdbcType.BIT)
    })
    Users selectByPrimaryKey(String id);
    
    
    @Select({
        "select",
        "id, username, password, name, email, mobile_phone, create_time, remarks, user_type, ",
        "portrait_url, enabled",
        "from users",
        "where username = #{username,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile_phone", property="mobilePhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="remarks", property="remarks", jdbcType=JdbcType.VARCHAR),
        @Result(column="user_type", property="userType", jdbcType=JdbcType.CHAR),
        @Result(column="portrait_url", property="portraitUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="enabled", property="enabled", jdbcType=JdbcType.BIT)
    })
    Users selectUser(String username);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table users
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, username, password, name, email, mobile_phone, create_time, remarks, user_type, ",
        "portrait_url, enabled",
        "from users"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile_phone", property="mobilePhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="remarks", property="remarks", jdbcType=JdbcType.VARCHAR),
        @Result(column="user_type", property="userType", jdbcType=JdbcType.CHAR),
        @Result(column="portrait_url", property="portraitUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="enabled", property="enabled", jdbcType=JdbcType.BIT)
    })
    List<Users> selectAll();
    
    
    @Select({
        "<script>select",
        "id, username, password, name, email, mobile_phone, create_time, remarks, user_type, ",
        "portrait_url, enabled",
        "from users"
        
        , "<trim prefix=\"WHERE\" prefixOverrides=\"AND\">"
        , "<if test=\"id != null and id != ''\">AND id=#{id,jdbcType=VARCHAR}</if>"
        , "<if test=\"userType != null and userType != ''\">AND user_type=#{userType,jdbcType=CHAR}</if>" 
        , "<if test=\"email != null and email != ''\">AND email=#{email,jdbcType=VARCHAR}</if>"
        , "<if test=\"mobilePhone != null and mobilePhone != ''\">AND mobile_phone=#{mobilePhone,jdbcType=VARCHAR}</if>" 
        , "<if test=\"username != null  and username != ''\">AND username like CONCAT('%' , #{username,jdbcType=VARCHAR} , '%')</if>" 
        ,"</trim> order by create_time desc</script>"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile_phone", property="mobilePhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="remarks", property="remarks", jdbcType=JdbcType.VARCHAR),
        @Result(column="user_type", property="userType", jdbcType=JdbcType.CHAR),
        @Result(column="portrait_url", property="portraitUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="enabled", property="enabled", jdbcType=JdbcType.BIT)
    })
    List<Users> searchUsers(Users user);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table users
     *
     * @mbg.generated
     */
    @Update({
        "update users",
        "set username = #{username,jdbcType=VARCHAR},",
          "password = #{password,jdbcType=VARCHAR},",
          "name = #{name,jdbcType=VARCHAR},",
          "email = #{email,jdbcType=VARCHAR},",
          "mobile_phone = #{mobilePhone,jdbcType=VARCHAR},",
          "create_time = #{createTime,jdbcType=TIMESTAMP},",
          "remarks = #{remarks,jdbcType=VARCHAR},",
          "user_type = #{userType,jdbcType=CHAR},",
          "portrait_url = #{portraitUrl,jdbcType=VARCHAR},",
          "enabled = #{enabled,jdbcType=BIT}",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Users record);
    
    
    @Update({
        "update users",
        "set " ,
          "user_type = #{userType,jdbcType=CHAR} " ,
        "where username = #{username,jdbcType=VARCHAR}" 
    })
    int updateUserType(@Param("username") String username , @Param("userType") String userType);
    
    @Update({
        "update users",
          "set enabled = #{enabled,jdbcType=BIT}",
        "where username = #{username,jdbcType=VARCHAR}" 
    })
    int enableUser(@Param("username")String username , @Param("enabled")Integer enabled);
}